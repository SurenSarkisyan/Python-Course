# Область видимости переменных - Scope

# Используется, для того чтобы определить в каком месте кода видна переменная

# Для каждой переменной существует свое пространство имен - контейнер где имена связаны с объектами, используется для того чтобы избежать
# путаницы в случае одинаковых имен, если одинаковые имена существуют в разных пространствах имен

# Scope - определяет иерархический порядок в котором пространства имен может быть достигнута для связи имен с объектами

# LEGB правило - для понимания того какое пространство имен используется в определенный момент, L- local, локальный определен
# внутри функции или класса, E - Enclosed - окружающий скоуп и он определен внутри окружающих функций если одна функция вложена в другую#
# G - Global Scope , B - Built-in - зарезервированные имена во встроенных модулях языка Python

# Local Scope Пример

pi = "global pi variable"  # Local scope обращается к переменным определенным в текущей функции, но если таковых нет
# то обращает внимание на внешние
def inner():
    pi = "inner pi variable"
    print(pi)

inner()

# Local and Global Scope

pi = "global pi variable"
def inner():
    pi = "inner pi variable"
    print(pi)

inner()
print(pi)

# Local and Global Scope and Enclosed
# global - так же присвоение данного значения осуществляет работу с глобальной переменной
pi = "global pi variable"
def outer():
    pi = "outer pi variable"
    def inner():
        nonlocal pi  # Не локальная переменная pi идет обращение из внутренней функции к внешней, идет поиск
        # переменной во внешней функции
        print(pi)
    inner()

outer()
print(pi)

# Built-in Scope

from math import pi  # В данном примере происходит поиск для pi в inner после в outer и потом если в данных функциях ничего нет
# в импортированной библиотеке pi
def outer():
    def inner():
        print(pi)
    inner()
outer()

# Обращение сначала идет с Local потом в Enclosed -> Global -> Built-in


















pi = "outer pi variable"  # Данный код дает разный вывод по причине того что переменные расположены в разных пространствах имен
def print_pi():
    pi = "inner pi variable"
    print(pi)

print_pi()
print(pi)


































